#!/usr/bin/env bash
set -euo pipefail

CMD=${1:-}
read -r SERVER || true
SERVER=$(echo -n "$SERVER" | tr -d '\r' | awk '{print $0}')

HH_CONF="$HOME/.hh/config.json"
if [ "$CMD" = "get" ]; then
  if [ -z "$SERVER" ]; then echo "missing server" >&2; exit 1; fi
  # normalize
  S=$(echo "$SERVER" | sed -E 's#^https?://##' | sed -E 's#(.*)/v2/?$#\1#' | sed -E 's#/$##')
  if [ "$S" != "ghcr.io" ] && [ "${S##*.ghcr.io}" = "$S" ]; then
    # not ghcr
    echo "not ghcr server" >&2
    exit 1
  fi
  if [ ! -f "$HH_CONF" ]; then echo "missing config" >&2; exit 1; fi
  TOKEN=$(sed -n 's/.*"download_token"[[:space:]]*:[[:space:]]*"\?\([^"}]*\)"\?.*/\1/p' "$HH_CONF" | head -n1)
  PORTAL=$(sed -n 's/.*"portal_base"[[:space:]]*:[[:space:]]*"\?\([^"}]*\)"\?.*/\1/p' "$HH_CONF" | head -n1)
  if [ -z "$TOKEN" ] || [ -z "$PORTAL" ]; then echo "incomplete config" >&2; exit 1; fi
  # call lease
  RES=$(curl -s -w "\n%{http_code}" -X POST -H "X-Download-Token: $TOKEN" "$PORTAL/lease")
  HTTP=$(echo "$RES" | tail -n1)
  BODY=$(echo "$RES" | sed '$d')
  if [ "$HTTP" != "200" ]; then echo "lease failed: $HTTP" >&2; echo "$BODY" >&2; exit 1; fi
  # parse Username and Secret (jq preferred but fallback to sed)
  if command -v jq >/dev/null 2>&1; then
    USER=$(echo "$BODY" | jq -r .Username)
    SECRET=$(echo "$BODY" | jq -r .Secret)
  else
    USER=$(echo "$BODY" | sed -n 's/.*"Username"[[:space:]]*:[[:space:]]*"\?\([^",}]*\)"\?.*/\1/p' | head -n1)
    SECRET=$(echo "$BODY" | sed -n 's/.*"Secret"[[:space:]]*:[[:space:]]*"\?\([^",}]*\)"\?.*/\1/p' | head -n1)
  fi
  printf '{"Username":"%s","Secret":"%s"}\n' "$USER" "$SECRET"
  exit 0
fi
if [ "$CMD" = "store" ] || [ "$CMD" = "erase" ]; then
  exit 0
fi
if [ "$CMD" = "list" ]; then
  printf '{}\n'
  exit 0
fi
echo "unknown cmd" >&2
exit 1
